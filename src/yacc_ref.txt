# 仅一个return
program    : function
function   : type Identifier Lparen Rparen Lbrace statement Rbrace
type       : Int
statement  : Return expression Semicolon
expression : Integer


# 一元运算符
expression
    : unary
unary
    : Integer
    | ('-'|'!'|'~') unary


# 加减乘除模
expression
    : additive
additive
    : multiplicative
    | additive ('+'|'-') multiplicative
multiplicative
    : unary
    | multiplicative ('*'|'/'|'%') unary
unary
    : primary
    | ('-'|'~'|'!') unary
primary
    : Integer
    | '(' expression ')'


# 比较和逻辑表达式
equality
    : relational
    | equality ('=='|'!=') relational
relational
    : additive
    | relational ('<'|'>'|'<='|'>=') additive
expression
    : logical_or
logical_or
    : logical_and
    | logical_or '||' logical_and
logical_and
    : equality
    | logical_and '&&' equality


# 局部变量和赋值
function
    : type Identifier '(' ')' '{' statement* '}'
statement
    : 'return' expression ';'
    | expression? ';'
    | declaration
declaration
    : type Identifier ('=' expression)? ';'
expression
    : assignment
assignment
    : logical_or
    | Identifier '=' expression
primary
    : Integer
    | '(' expression ')'
    | Identifier


# if 语句和条件表达式
statement
    : 'return' expression ';'
    | expression? ';'
    | 'if' '(' expression ')' statement ('else' statement)?
assignment
    : conditional
    | Identifier '=' expression
conditional
    : logical_or
    | logical_or '?' expression ':' conditional
function
    : type Identifier '(' ')' '{' block_item* '}'
block_item
    : statement
    | declaration


# 作用域和块语句
function
    : type Identifier '(' ')' compound_statement
compound_statement
    : '{' block_item* '}'
statement
    : 'return' expression ';'
    | expression? ';'
    | 'if' '(' expression ')' statement ('else' statement)?
    | compound_statement


# 循环语句
statement
    : 'return' expression ';'
    | expression? ';'
    | 'if' '(' expression ')' statement ('else' statement)?
    | compound_statement
    | 'for' '(' expression? ';' expression? ';' expression? ')' statement
    | 'for' '(' declaration expression? ';' expression? ')' statement
    | 'while' '(' expression ')' statement
    | 'do' statement 'while' '(' expression ')' ';'
    | 'break' ';'
    | 'continue' ';'


# 函数
program
    : function*
function
    : type Identifier '(' parameter_list ')' (compound_statement | ';')
parameter_list
    : (type Identifier (',' type Identifier)*)?
expression_list
    : (expression (',' expression)*)?
unary
    : postfix
    | ('-'|'~'|'!') unary
postfix
    : primary
    | Identifier '(' expression_list ')'

# 全局变量
program
    : (function | declaration)*


# 指针
type
    : 'int'
    | type '*'
assignment
    : conditional
    | unary '=' expression
unary
    : postfix
    | ('-'|'~'|'!'|'&'|'*') unary
unary
    : ...
    | '(' type ')' unary


# 数组
declaration
    : type Identifier ('[' Integer ']')* ('=' expression)? ';'
postfix
    : primary
    | Identifier '(' expression_list ')'
    | postfix '[' expression ']'