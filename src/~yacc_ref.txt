c_file:
    empty
    | external_declaration c_file
external_declaration:
    function_definition
    | declaration
    | SEMI


function_definition:
    # int                   *add_pointer  (int *a, int *b) {...}
    declaration_specifiers id_declarator compound_statement

declaration_specifiers:
    type_specifier

#TODO:
    (1) with typeid, such as struct, union and enum
type_specifier:
    type_specifier_no_typeid
type_specifier_no_typeid:
    VOID
    | INT
    | UNSIGNED INT
    | LONG
    | UNSIGNED LONG
    | CHAR
    | UNSIGNED CHAR
    | FLOAT
    | DOUBLE

id_declarator:
    pointer direct_id_declarator
pointer:
    TIMES
    | TIMES pointer
direct_id_declarator:
    identifier
    | direct_id_declarator LPAREN RPAREN # e.g. main()
    | direct_id_declarator LPAREN parameter_list RPAREN # e.g. add(int x, int y)
parameter_list :
    parameter_declaration
    | parameter_list COMMA parameter_declaration
parameter_declaration:
    declaration_specifiers
    | declaration_specifiers id_declarator


compound_statement:
    LBRACE RBRACE
    | LBRACE block_item_list RBRACE
block_item_list:
    block_item
    | block_item block_item_list
block_item:
    declaration
    | statement

declaration:
    decl_body SEMI
decl_body:
    declaration_specifiers init_declarator_list
init_declarator_list:
    init_declarator
    | init_declarator COMMA init_declarator_list
init_declarator:
    declarator
    | declarator EQUALS initializer
declarator:
    id_declarator
initializer:
    assignment_expression



statement:
    expression_statement
    | compound_statement # {...}
    | selection_statement # e.g. if-else
    | iteration_statement # e.g. for, while
    | jump_statement # e.g. return, continue, break

expression_statement:
    expression SEMI
    | SEMI
expression:
    assignment_expression
    | expression COMMA assignment
assignment_expression:
    conditional_expression # e.g. 1+3+4
    | unary_expression assignment_operator assignment_expression # e.g. a=...
assignment_operator:
    EQUALS
    | XOREQUAL
    | TIMESEQUAL
    | DIVEQUAL
    | MODEQUAL
    | PLUSEQUAL
    | MINUSEQUAL
    | LSHIFTEQUAL
    | RSHIFTEQUAL
    | ANDEQUAL
    | OREQUAL
conditional_expression:
    binary_expression
    | binary_expression CONDOP expression COLON conditional_expression # ?:
binary_expression:
    cast_expression # type cast expression
    | binary_expression TIMES binary_expression
    | binary_expression DIVIDE binary_expression
    | binary_expression MOD binary_expression
    | binary_expression PLUS binary_expression
    | binary_expression MINUS binary_expression
    | binary_expression RSHIFT binary_expression
    | binary_expression LSHIFT binary_expression
    | binary_expression LT binary_expression
    | binary_expression LE binary_expression
    | binary_expression GE binary_expression
    | binary_expression GT binary_expression
    | binary_expression EQ binary_expression
    | binary_expression NE binary_expression
    | binary_expression AND binary_expression
    | binary_expression OR binary_expression
    | binary_expression XOR binary_expression
    | binary_expression LAND binary_expression
    | binary_expression LOR binary_expression
cast_expression:
    unary_expression
    | LPAREN type_name RPAREN cast_expression
#TODO:
    (1) ++
    (2) --
unary_expression:
    postfix_expression
    | unary_operator cast_expression
unary_operator:
    AND
    | TIMES
    | PLUS
    | MINUS
    | NOT
    | LNOT
postfix_expression:
    primary_expression # ID or CONSTANT
    | postfix_expression LBRACKET expression RBRACKET # e.g. a[0]
    | postfix_expression LPAREN argument_expression_list RPAREN # e.g. sum(1,3)
    | postfix_expression LPAREN RPAREN # e.g. one()
 argument_expression_list:
    assignment_expression
    | argument_expression_list COMMA assignment_expression
primary_expression:
    identifier
    | constant

identifier:
    ID
constant:
    INT_CONST_DEC
    | FLOAT_CONST
    | CHAR_CONST
    | STRING_LITERAL


selection_statement:
    IF LPAREN expression RPAREN statement
    | IF LPAREN expression RPAREN statement ELSE statement
iteration_statement:
    WHILE LPAREN expression RPAREN statement
    FOR LPAREN for_expr_opt SEMI for_expr_opt SEMI for_expr_opt RPAREN statement
for_expr_opt:
    empty
    | expression
jump_statement:
    BREAK SEMI
    | CONTIUE SEMI
    | RETURN SEMI
    | RETURN expression SEMI